// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using technicalservicesprogram.DataAccess.Context;

#nullable disable

namespace technicalservicesprogram.DataAccess.Migrations
{
    [DbContext(typeof(TspDatabase))]
    [Migration("20250926124137_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.CreateUpdateDelete.DateUserCreate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAppId");

                    b.HasIndex("UserId");

                    b.ToTable("DateUserCreate");
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.CreateUpdateDelete.TimeUserCreate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAppId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserAppId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeUserCreate");
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.RoleApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserApp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SicilNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5145c20e-3ff6-4f0f-b760-bbd5ab9a091e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c566b8b1-a198-45fe-88a1-2b339bc7fce0",
                            Email = "stoy@sakarya.edu.tr",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Serkan",
                            NormalizedEmail = "STOY@SAKARYA.EDU.TR",
                            NormalizedUserName = "STOY",
                            PasswordHash = "NvXPMYn7mrBibtmGCOpxsKFDq1pHpVPXM/Hz0qN0Tkw=",
                            PhoneNumber = "0(564) 295 50 92",
                            PhoneNumberConfirmed = false,
                            Salt = "System.Byte[]",
                            SecurityStamp = "82f32c87-2a99-4a54-8246-a47a301f95c2",
                            SicilNo = "944",
                            SurName = "TOY",
                            TwoFactorEnabled = false,
                            UserName = "stoy"
                        },
                        new
                        {
                            Id = "0dfcb4e1-45be-47f4-bee9-ae23c5fe24d7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09d527e1-b87e-48f8-bbf5-6d43cbb12a5a",
                            Email = "stoy@sakarya.edu.tr",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Serkan",
                            NormalizedEmail = "STOY@SAKARYA.EDU.TR",
                            NormalizedUserName = "STOY",
                            PasswordHash = "6TJpYeVO8Aj+F94xqRCqQf8/2TPBQ/gAqblWzOQ56m4=",
                            PhoneNumber = "0(564) 295 50 92",
                            PhoneNumberConfirmed = false,
                            Salt = "System.Byte[]",
                            SecurityStamp = "1302e6dc-c28b-4a06-b96a-3c6755edf960",
                            SicilNo = "944",
                            SurName = "TOY",
                            TwoFactorEnabled = false,
                            UserName = "stoy"
                        });
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.CreateUpdateDelete.DateUserCreate", b =>
                {
                    b.HasOne("technicalservicesprogram.Entities.Core.Users.UserApp", null)
                        .WithMany("DateUserCreates")
                        .HasForeignKey("UserAppId");

                    b.HasOne("technicalservicesprogram.Entities.Core.Users.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.CreateUpdateDelete.TimeUserCreate", b =>
                {
                    b.HasOne("technicalservicesprogram.Entities.Core.Users.UserApp", null)
                        .WithMany("TimeUserCreates")
                        .HasForeignKey("UserAppId");

                    b.HasOne("technicalservicesprogram.Entities.Core.Users.UserApp", "UserApp")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserApp");
                });

            modelBuilder.Entity("technicalservicesprogram.Entities.Core.Users.UserApp", b =>
                {
                    b.Navigation("DateUserCreates");

                    b.Navigation("TimeUserCreates");
                });
#pragma warning restore 612, 618
        }
    }
}
